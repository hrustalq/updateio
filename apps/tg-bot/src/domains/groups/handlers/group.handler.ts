import { Context } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';
import { UserService } from '../../../services/user.service';
import { GroupService } from '../../../services/group.service';

@Injectable()
export class GroupHandler {
  private readonly logger = new Logger(GroupHandler.name);

  constructor(
    private readonly userService: UserService,
    private readonly groupService: GroupService,
  ) {}

  async onBotAdded(ctx: Context) {
    if (!ctx.chat || !ctx.from) {
      return;
    }

    try {
      // Check if user can add bot to more groups
      const canJoinGroup = await this.userService.canJoinGroup(
        ctx.from.id.toString(),
      );
      if (!canJoinGroup) {
        await ctx.reply(
          '‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø. –£–¥–∞–ª–∏—Ç–µ –±–æ—Ç–∞ –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≥—Ä—É–ø–ø –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        );
        await ctx.leaveChat();
        return;
      }

      // Create or update user
      const user = await this.userService.findOrCreateUser(
        ctx.from.id.toString(),
        ctx.from,
      );

      // Create or update group
      const group = await this.groupService.findOrCreateGroup(
        ctx.chat,
        user.id,
      );

      // Add user as member and admin
      await this.groupService.addMember(group.id, user.id);
      await this.groupService.addAdmin(group.id, user.id);

      await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–≥—Ä –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '/subscribe <–∏–≥—Ä–∞> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n' +
          '/unsubscribe <–∏–≥—Ä–∞> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n' +
          '/list - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n' +
          '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      );
    } catch (error) {
      this.logger.error('Error handling bot added to group', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
      await ctx.leaveChat();
    }
  }

  async onBotRemoved(ctx: Context) {
    if (!ctx.chat || !ctx.from) {
      return;
    }

    try {
      const user = await this.userService.findOrCreateUser(
        ctx.from.id.toString(),
        ctx.from,
      );
      const group = await this.groupService.findOrCreateGroup(
        ctx.chat,
        user.id,
      );
      await this.groupService.deactivateGroup(group.id);
    } catch (error) {
      this.logger.error('Error handling bot removed from group', error);
    }
  }

  async onNewMember(ctx: Context) {
    if (!ctx.chat || !ctx.from || !('new_chat_members' in ctx.message)) {
      return;
    }

    try {
      const user = await this.userService.findOrCreateUser(
        ctx.from.id.toString(),
        ctx.from,
      );
      const group = await this.groupService.findOrCreateGroup(
        ctx.chat,
        user.id,
      );

      for (const member of ctx.message.new_chat_members) {
        if (member.is_bot) continue;

        const newUser = await this.userService.findOrCreateUser(
          member.id.toString(),
          member,
        );
        await this.groupService.addMember(group.id, newUser.id);
      }
    } catch (error) {
      this.logger.error('Error handling new members', error);
    }
  }

  async onMemberLeft(ctx: Context) {
    if (!ctx.chat || !ctx.from || !('left_chat_member' in ctx.message)) {
      return;
    }

    try {
      const user = await this.userService.findOrCreateUser(
        ctx.from.id.toString(),
        ctx.from,
      );
      const group = await this.groupService.findOrCreateGroup(
        ctx.chat,
        user.id,
      );

      const leftMember = ctx.message.left_chat_member;
      if (!leftMember.is_bot) {
        const leftUser = await this.userService.findOrCreateUser(
          leftMember.id.toString(),
          leftMember,
        );
        await this.groupService.removeMember(group.id, leftUser.id);
      }
    } catch (error) {
      this.logger.error('Error handling member left', error);
    }
  }
}
