import { Context } from 'telegraf';
import { Injectable } from '@nestjs/common';
import { UserService } from '../services/user.service';
import { SubscriptionService } from '../services/subscription.service';

@Injectable()
export class ListCommand {
  constructor(
    private readonly userService: UserService,
    private readonly subscriptionService: SubscriptionService,
  ) {}

  async handle(ctx: Context) {
    if (!ctx.from) {
      return ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      );
    }

    try {
      const user = await this.userService.findOrCreateUser(
        ctx.from.id.toString(),
      );
      const subscriptions = await this.subscriptionService.listSubscriptions(
        user.id,
      );

      if (subscriptions.length === 0) {
        return ctx.reply(
          'üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe <–∏–≥—Ä–∞> –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.',
        );
      }

      const message = [
        'üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n',
        ...subscriptions.map((sub, index) => `${index + 1}. ${sub.game.name}`),
        '\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã>',
        '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings',
      ].join('\n');

      return ctx.reply(message);
    } catch (error) {
      return ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }
}
