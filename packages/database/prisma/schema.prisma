generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameProvider {
  id          String   @id @default(cuid())
  name        String
  description String?

  imageUrl String?

  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id          String   @id @default(cuid())

  name        String
  description String?
  imageUrl    String?

  externalId String?

  providerId String
  provider GameProvider @relation(fields: [providerId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  updates GameUpdate[]
  subscriptions UserSubscription[]
  updateCommand UpdateCommand?

  @@index([providerId])
}

model GameUpdate {
  id        String   @id @default(cuid())
  version   String?
  content   String?

  gameId    String
  game Game @relation(fields: [gameId], references: [id])

  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gameId])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  CLIENT
}

model User {
  id           String   @id @default(cuid())
  telegramId   String?  @unique

  subscriptions UserSubscription[]
  notifications Notification[]
  reports Report[]

  role UserRole @default(USER)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
} 

model UserSubscription {
  id        String   @id @default(cuid())

  userId    String
  user User @relation(fields: [userId], references: [id])

  gameId String
  game Game @relation(fields: [gameId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([gameId])
}

enum NotificationType {
  UPDATE
  REPORT
  WARNING
  ERROR
}

model Notification {
  id        String   @id @default(cuid())

  userId    String
  user User @relation(fields: [userId], references: [id])

  gameUpdateId String
  gameUpdate GameUpdate @relation(fields: [gameUpdateId], references: [id])

  type NotificationType @default(UPDATE)
  content String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([gameUpdateId])
}

model Report {
  id        String   @id @default(cuid())

  userId    String
  user User @relation(fields: [userId], references: [id])

  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpdateCommand {
  id        String   @id @default(cuid())

  gameId String? @unique
  game Game? @relation(fields: [gameId], references: [id])

  command String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gameId])
}
